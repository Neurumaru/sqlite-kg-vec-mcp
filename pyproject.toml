[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "sqlite-kg-vec-mcp"
version = "0.2.0"
description = "SQLite-based Knowledge Graph with Vector Search and MCP Server Interface using Hexagonal Architecture"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
    { name = "Neurumaru", email = "neurumaru@example.com" }
]
keywords = ["knowledge-graph", "vector-search", "mcp", "sqlite", "hexagonal-architecture", "langfuse"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core dependencies
    "numpy>=1.24.0",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.0.0",
    # MCP Server dependencies
    "fastmcp>=2.3.0",
    "mcp>=1.8.0",
    "exceptiongroup>=1.2.2",
    "httpx>=0.28.1",
    # Vector search and embeddings
    "hnswlib>=0.7.0",
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",
    # LLM and integrations
    "ollama>=0.3.0",
    "langfuse>=2.0.0",
    # HTTP and utilities
    "requests>=2.25.0",
    "aiofiles>=23.0.0",
    "pydantic>=2.0.0",
    "openai>=1.97.1",
    "langchain-core>=0.3.72",
    "structlog>=25.4.0",
    "streamlit>=1.47.1",
    "opentelemetry-api>=1.36.0",
    "opentelemetry-sdk>=1.36.0",
    "opentelemetry-exporter-otlp>=1.36.0",
    "opentelemetry-exporter-jaeger-thrift>=1.21.0",
    "opentelemetry-instrumentation>=0.45b0",
    "opentelemetry-instrumentation-requests>=0.45b0",
    "opentelemetry-instrumentation-sqlite3>=0.45b0",
    "deprecated>=1.2.18",
]

[project.optional-dependencies]
dev = [
    # Testing
    "coverage>=7.0.0",
    "parameterized>=0.9.0",
    
    # Code quality
    "black>=24.1.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    
    # Development utilities
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]

web = [
    # Streamlit web interface
    "streamlit>=1.28.0",
    "plotly>=5.15.0",
]

embeddings = [
    "openai>=1.0.0",
    "anthropic>=0.20.0",
    "cohere>=4.0.0",
]

monitoring = [
    "prometheus-client>=0.19.0",
    "structlog>=23.0.0",
]

all = [
    "sqlite-kg-vec-mcp[dev,embeddings,monitoring]"
]

[project.scripts]
sqlite-kg-vec-mcp = "src.main:main"

[project.urls]
Homepage = "https://github.com/neurumaru/sqlite-kg-vec-mcp"
Repository = "https://github.com/neurumaru/sqlite-kg-vec-mcp.git"
Issues = "https://github.com/neurumaru/sqlite-kg-vec-mcp/issues"
Documentation = "https://github.com/neurumaru/sqlite-kg-vec-mcp/blob/main/README.md"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "flake8>=7.3.0",
    "flake8-pyproject>=1.2.3",
    "isort>=6.0.1",
    "mypy>=1.17.0",
    "pylint>=3.3.7",
    "pytest>=8.4.1",
    "ruff>=0.12.5",
    "types-requests>=2.32.4.20250611",
]

# Testing configuration (unittest)
[tool.unittest]
# unittest는 Python 내장 모듈이므로 별도 설정 불필요
# 테스트 실행: python -m unittest discover -s tests -p "test_*.py"

# Type checking configuration
[tool.mypy]
python_version = "3.10"
strict = false
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
show_error_codes = true

# Specific module configurations
[[tool.mypy.overrides]]
module = [
    "hnswlib.*",
    "sentence_transformers.*", 
    "openai.*",
    "anthropic.*",
    "fastmcp.*",
    "torch.*",
    "langfuse.*",
    "ollama.*",
    "numpy.*",
]
ignore_missing_imports = true

# Code formatting configuration
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
known_first_party = ["src"]

# Linting configuration
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "E501", "W503"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S106",
]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E203", # whitespace before ':'
    "E501", # line too long (handled by black)
    "I001", # import sorting (handled by isort)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S106"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Package sources for uv
[tool.uv.sources]
"sqlite-kg-vec-mcp" = { path = "." } 

[tool.pylint]
jobs = 0
unsafe-load-any-extension = "no"

# MESSAGES CONTROL
disable = [
    "C0301",  # line-too-long (Black manages this)
    "W0511",  # fixme (normal during development)
    "R0801",  # duplicate-code (hexagonal architecture allows interface duplication)
    "R0903",  # too-few-public-methods (DTO, Value Objects allowed for architectural patterns)
    "W0613",  # unused-argument (test fixtures)
    "R0902",  # too-many-instance-attributes (DTO/Entity attribute count allowed)
    
    # "Too many ..." 복잡도 관련 경고들 - 비즈니스 로직 복잡도 허용
    "R0913",  # too-many-arguments
    "R0917",  # too-many-positional-arguments  
    "R0912",  # too-many-branches
    "R0915",  # too-many-statements
    "R0914",  # too-many-locals
    "R0904",  # too-many-public-methods

    # 외부 라이브러리 관련 오류들
    "E1101",  # no-member (외부 라이브러리의 동적 속성)
    "I1101",  # c-extension-no-member (C 확장 모듈)
    "E1121",  # too-many-function-args (외부 라이브러리 호출)

    "C0103",
    "W0718",
]
